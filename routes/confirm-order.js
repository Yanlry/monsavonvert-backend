const express = require('express');
const router = express.Router();
const Order = require('../models/Order');
const Customer = require('../models/Customer');
const User = require('../models/user'); // Si tu as un mod√®le User distinct

// Route pour confirmer une commande apr√®s paiement Stripe
router.post('/confirm-order', async (req, res) => {
  try {
    console.log("üìù R√©ception d'une demande de confirmation de commande");
    const { customerId, items, totalAmount, sessionId, shippingMethod, shippingCost } = req.body;

    console.log("üìã Donn√©es re√ßues:", {
      customerId,
      itemsCount: items?.length || 0,
      totalAmount,
      sessionId,
      shippingMethod,
      shippingCost
    });

    // V√©rifier si les donn√©es requises sont pr√©sentes
    if (!customerId || !items || !totalAmount || !sessionId) {
      console.error("‚ùå Donn√©es de commande incompl√®tes");
      return res.status(400).json({
        success: false,
        error: "Donn√©es de commande incompl√®tes"
      });
    }

    // Trouver le client associ√© √† l'utilisateur
    console.log(`üîç Recherche du client pour l'utilisateur ID: ${customerId}`);
    let customer = await Customer.findOne({ userId: customerId });
    
    // Si aucun client n'est trouv√©, on essaie de le trouver par email
    if (!customer) {
      console.log("‚ö†Ô∏è Client non trouv√© par userId, recherche de l'utilisateur");
      const user = await User.findById(customerId);
      
      if (!user) {
        console.error("‚ùå Utilisateur non trouv√©");
        return res.status(404).json({
          success: false,
          error: "Utilisateur non trouv√©"
        });
      }
      
      console.log(`üîç Recherche du client par email: ${user.email}`);
      customer = await Customer.findOne({ email: user.email });
      
      // Si toujours pas de client, on en cr√©e un nouveau
      if (!customer) {
        console.log("‚ú® Cr√©ation d'un nouveau client");
        customer = new Customer({
          firstName: user.firstName,
          lastName: user.lastName,
          email: user.email,
          userId: user._id,
          phone: user.phone || '',
          // Autres champs selon ton mod√®le
        });
        
        await customer.save();
        console.log(`‚úÖ Nouveau client cr√©√© avec l'ID: ${customer._id}`);
      }
    }

    // Cr√©er la commande
    console.log("üõí Cr√©ation de la nouvelle commande");
    const newOrder = new Order({
      customer: customer._id,
      items: items,
      totalAmount: parseFloat(totalAmount),
      status: "pending", // Statut initial de la commande
      payment: "completed", // Statut de paiement
      sessionId: sessionId,
      shippingMethod: shippingMethod || 'standard',
      shippingCost: parseFloat(shippingCost || 0),
    });
    
    await newOrder.save();
    console.log(`‚úÖ Nouvelle commande cr√©√©e avec l'ID: ${newOrder._id}`);
    
    // Associer la commande au client
    customer.orders = customer.orders || [];
    customer.orders.push(newOrder._id);
    await customer.save();
    console.log("üîÑ Commande associ√©e au client");

    // R√©pondre avec les donn√©es de la commande
    console.log("üì¨ Envoi de la r√©ponse");
    res.status(200).json({
      success: true,
      order: newOrder,
      message: "Commande confirm√©e avec succ√®s"
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la confirmation de la commande:", error);
    res.status(500).json({
      success: false,
      error: "Erreur lors de la confirmation de la commande"
    });
  }
});

module.exports = router;