// scripts/migrate-reviews.js
// Script pour migrer les anciens avis et ajouter les champs manquants

const mongoose = require('mongoose');
const Product = require('../models/product'); // Ajustez le chemin selon votre structure
require('dotenv').config(); // Charger les variables d'environnement

// Configuration de la base de donn√©es - utiliser la m√™me URI que votre app
const MONGODB_URI = process.env.MONGODB_URI || process.env.DATABASE_URL || 'mongodb://localhost:27017/votre-db';

console.log('üîç URI MongoDB utilis√©e:', MONGODB_URI ? MONGODB_URI.replace(/\/\/.*:.*@/, '//***:***@') : 'AUCUNE URI');

async function migrateReviews() {
  try {
    console.log('üöÄ D√©but de la migration des avis...');
    
    // V√©rifier que l'URI est d√©finie
    if (!MONGODB_URI || MONGODB_URI.includes('localhost')) {
      console.error('‚ùå ATTENTION: Utilisation de MongoDB local ou URI manquante');
      console.log('üí° Assurez-vous que MONGODB_URI est d√©finie dans votre .env');
      console.log('üí° Variable trouv√©e:', process.env.MONGODB_URI ? 'OUI' : 'NON');
    }
    
    // Se connecter √† MongoDB
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connect√© √† la base de donn√©es MongoDB');

    // Trouver tous les produits avec des avis
    const products = await Product.find({ 'reviews.0': { $exists: true } });
    console.log(`üì¶ ${products.length} produits trouv√©s avec des avis`);

    if (products.length === 0) {
      console.log('‚ÑπÔ∏è Aucun produit avec des avis trouv√©. Migration termin√©e.');
      return;
    }

    let totalMigrated = 0;
    let totalAlreadyMigrated = 0;

    for (const product of products) {
      console.log(`\nüì¶ Migration du produit: ${product.title}`);
      
      let productModified = false;
      
      for (let i = 0; i < product.reviews.length; i++) {
        const review = product.reviews[i];
        
        // V√©rifier si l'avis a d√©j√† un userId
        if (review.userId) {
          totalAlreadyMigrated++;
          console.log(`  ‚úÖ Avis ${i + 1} d√©j√† migr√© (userId: ${review.userId})`);
          continue;
        }

        // Extraire firstName et lastName du champ 'user' si possible
        let firstName = review.firstName;
        let lastName = review.lastName;
        
        if (!firstName && !lastName && review.user) {
          const nameParts = review.user.trim().split(' ');
          firstName = nameParts[0] || '';
          lastName = nameParts.slice(1).join(' ') || '';
        }

        // G√©n√©rer un userId temporaire bas√© sur le nom
        // ‚ö†Ô∏è ATTENTION: Cette m√©thode g√©n√®re des IDs temporaires
        // Dans un vrai syst√®me, vous devriez mapper les vrais IDs utilisateurs
        const tempUserId = generateTempUserId(firstName, lastName, review.user);

        // Mettre √† jour l'avis
        product.reviews[i] = {
          ...review.toObject(),
          userId: tempUserId,
          firstName: firstName || 'Anonyme',
          lastName: lastName || '',
          user: review.user || `${firstName} ${lastName}`,
          createdAt: review.createdAt || new Date()
        };

        productModified = true;
        totalMigrated++;
        
        console.log(`  üîÑ Avis ${i + 1} migr√©:`, {
          originalUser: review.user,
          newUserId: tempUserId,
          firstName,
          lastName
        });
      }

      // Sauvegarder le produit si modifi√©
      if (productModified) {
        await product.save();
        console.log(`  üíæ Produit sauvegard√©`);
      }
    }

    console.log('\nüìä R√©sum√© de la migration:');
    console.log(`  ‚úÖ ${totalMigrated} avis migr√©s`);
    console.log(`  ‚è≠Ô∏è  ${totalAlreadyMigrated} avis d√©j√† migr√©s`);
    console.log(`  üì¶ ${products.length} produits trait√©s`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüí° Solutions possibles:');
      console.log('  1. V√©rifiez que MONGODB_URI est d√©finie dans votre .env');
      console.log('  2. Assurez-vous que votre URI MongoDB Atlas est correcte');
      console.log('  3. V√©rifiez votre connexion internet');
      console.log('  4. Si vous utilisez MongoDB local, assurez-vous qu\'il est d√©marr√©');
    }
  } finally {
    // Fermer la connexion
    await mongoose.disconnect();
    console.log('üîö Connexion ferm√©e');
  }
}

/**
 * G√©n√®re un userId temporaire bas√© sur le nom
 * ‚ö†Ô∏è ATTENTION: Cette m√©thode est pour la migration uniquement
 * Dans un vrai syst√®me, utilisez les vrais IDs utilisateurs
 */
function generateTempUserId(firstName, lastName, fullName) {
  const name = fullName || `${firstName} ${lastName}`;
  const hash = name.toLowerCase().replace(/\s+/g, '');
  const timestamp = Date.now().toString().slice(-6); // 6 derniers chiffres
  return `temp_${hash}_${timestamp}`;
}

/**
 * Version alternative si vous avez une table Users
 * Cette fonction essaie de trouver le vrai userId
 */
async function findRealUserId(firstName, lastName, fullName) {
  // Si vous avez un mod√®le User, d√©commentez et adaptez:
  /*
  const User = require('../models/user');
  
  let user = null;
  
  // Chercher par pr√©nom et nom
  if (firstName && lastName) {
    user = await User.findOne({ 
      firstName: new RegExp(firstName, 'i'), 
      lastName: new RegExp(lastName, 'i') 
    });
  }
  
  // Si pas trouv√©, chercher par nom complet
  if (!user && fullName) {
    const [fName, ...lNameParts] = fullName.split(' ');
    const lName = lNameParts.join(' ');
    user = await User.findOne({ 
      firstName: new RegExp(fName, 'i'), 
      lastName: new RegExp(lName, 'i') 
    });
  }
  
  if (user) {
    return user._id.toString();
  }
  */
  
  // Fallback: g√©n√©rer un ID temporaire
  return generateTempUserId(firstName, lastName, fullName);
}

// Lancer la migration
if (require.main === module) {
  migrateReviews()
    .then(() => {
      console.log('üéâ Migration termin√©e avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• √âchec de la migration:', error);
      process.exit(1);
    });
}

module.exports = { migrateReviews };