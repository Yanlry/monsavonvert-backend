// ================================
// scripts/migrate-reviews.js
// Script pour migrer les anciens avis et ajouter les champs manquants
// ================================

const mongoose = require('mongoose');
const Product = require('../models/product');
require('dotenv').config();

// ‚úÖ STANDARDISATION: M√™me logique que app.js
const mongoURI = process.env.MONGODB_URI || process.env.CONNECTION_STRING;

console.log('üîç Configuration de migration:');
console.log('URI MongoDB:', mongoURI ? mongoURI.replace(/\/\/.*:.*@/, '//***:***@') : 'AUCUNE URI');
console.log('Environnement:', process.env.NODE_ENV || 'development');

/**
 * Fonction principale de migration des avis
 */
async function migrateReviews() {
  try {
    console.log('üöÄ D√©but de la migration des avis...\n');
    
    // ‚úÖ V√©rification de l'URI MongoDB
    if (!mongoURI) {
      console.error('‚ùå ERREUR CRITIQUE: Aucune URI MongoDB trouv√©e');
      console.error('üìù V√©rifiez que MONGODB_URI est d√©finie dans votre .env');
      console.error('üí° Variables disponibles:');
      console.error('   - MONGODB_URI:', process.env.MONGODB_URI ? 'D√©finie' : 'Manquante');
      console.error('   - CONNECTION_STRING:', process.env.CONNECTION_STRING ? 'D√©finie' : 'Manquante');
      throw new Error('Variables MongoDB manquantes');
    }
    
    // ‚úÖ Connexion MongoDB avec m√™me config que app.js
    console.log('üîå Connexion √† MongoDB...');
    await mongoose.connect(mongoURI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 30000,
      socketTimeoutMS: 75000,
    });
    console.log('‚úÖ Connect√© √† la base de donn√©es MongoDB\n');

    // ‚úÖ Recherche des produits avec avis
    console.log('üîç Recherche des produits avec des avis...');
    const products = await Product.find({ 
      'reviews.0': { $exists: true } 
    });
    
    console.log(`üì¶ ${products.length} produit(s) trouv√©(s) avec des avis\n`);

    if (products.length === 0) {
      console.log('‚ÑπÔ∏è Aucun produit avec des avis trouv√©. Migration termin√©e.');
      return { migrated: 0, alreadyMigrated: 0, products: 0 };
    }

    // ‚úÖ Compteurs pour le rapport
    let totalMigrated = 0;
    let totalAlreadyMigrated = 0;
    let totalErrors = 0;

    // ‚úÖ Migration produit par produit
    for (const [index, product] of products.entries()) {
      console.log(`üì¶ [${index + 1}/${products.length}] Migration du produit: "${product.title}"`);
      console.log(`   Avis √† traiter: ${product.reviews.length}`);
      
      let productModified = false;
      
      for (let i = 0; i < product.reviews.length; i++) {
        const review = product.reviews[i];
        
        try {
          // ‚úÖ V√©rifier si l'avis a d√©j√† un userId
          if (review.userId) {
            totalAlreadyMigrated++;
            console.log(`   ‚úÖ Avis ${i + 1} d√©j√† migr√© (userId: ${review.userId})`);
            continue;
          }

          // ‚úÖ Extraire firstName et lastName
          const { firstName, lastName } = extractNames(review);
          
          // ‚úÖ G√©n√©rer un userId temporaire
          const tempUserId = generateTempUserId(firstName, lastName, review.user);

          // ‚úÖ Mettre √† jour l'avis avec tous les champs requis
          product.reviews[i] = {
            ...review.toObject(),
            userId: tempUserId,
            firstName: firstName || 'Anonyme',
            lastName: lastName || '',
            user: review.user || `${firstName} ${lastName}`.trim(),
            createdAt: review.createdAt || new Date(),
            // Ajouter d'autres champs si n√©cessaire
            verified: review.verified || false,
            helpful: review.helpful || 0,
          };

          productModified = true;
          totalMigrated++;
          
          console.log(`   üîÑ Avis ${i + 1} migr√©:`, {
            originalUser: review.user || 'Non d√©fini',
            newUserId: tempUserId,
            firstName: firstName || 'Anonyme',
            lastName: lastName || ''
          });

        } catch (reviewError) {
          console.error(`   ‚ùå Erreur avis ${i + 1}:`, reviewError.message);
          totalErrors++;
        }
      }

      // ‚úÖ Sauvegarder le produit si modifi√©
      if (productModified) {
        try {
          await product.save();
          console.log(`   üíæ Produit sauvegard√© avec succ√®s`);
        } catch (saveError) {
          console.error(`   ‚ùå Erreur sauvegarde:`, saveError.message);
          totalErrors++;
        }
      }
      
      console.log(''); // Ligne vide pour lisibilit√©
    }

    // ‚úÖ Rapport final
    const report = {
      migrated: totalMigrated,
      alreadyMigrated: totalAlreadyMigrated,
      products: products.length,
      errors: totalErrors
    };

    console.log('üìä RAPPORT DE MIGRATION:');
    console.log('================================');
    console.log(`‚úÖ Avis migr√©s:           ${report.migrated}`);
    console.log(`‚è≠Ô∏è  Avis d√©j√† migr√©s:     ${report.alreadyMigrated}`);
    console.log(`üì¶ Produits trait√©s:      ${report.products}`);
    console.log(`‚ùå Erreurs rencontr√©es:   ${report.errors}`);
    console.log('================================\n');

    return report;

  } catch (error) {
    console.error('‚ùå ERREUR CRITIQUE lors de la migration:', error.message);
    
    // ‚úÖ Messages d'aide pour diagnostic
    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüí° Solutions possibles:');
      console.log('  1. V√©rifiez que MONGODB_URI est d√©finie dans votre .env');
      console.log('  2. Assurez-vous que votre URI MongoDB Atlas est correcte');
      console.log('  3. V√©rifiez votre connexion internet');
      console.log('  4. Si MongoDB local, assurez-vous qu\'il est d√©marr√©');
    }
    
    if (error.message.includes('buffering timed out')) {
      console.log('\nüí° Probl√®me de timeout:');
      console.log('  1. V√©rifiez l\'IP Whitelist sur MongoDB Atlas');
      console.log('  2. Testez la connexion depuis votre app principale');
    }
    
    throw error;
  } finally {
    // ‚úÖ Fermeture propre de la connexion
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
      console.log('üîö Connexion MongoDB ferm√©e');
    }
  }
}

/**
 * Extrait firstName et lastName √† partir des donn√©es d'avis
 * @param {Object} review - L'objet avis
 * @returns {Object} - {firstName, lastName}
 */
function extractNames(review) {
  let firstName = review.firstName;
  let lastName = review.lastName;
  
  // Si pas de firstName/lastName, essayer d'extraire du champ 'user'
  if (!firstName && !lastName && review.user) {
    const nameParts = review.user.trim().split(' ');
    firstName = nameParts[0] || '';
    lastName = nameParts.slice(1).join(' ') || '';
  }
  
  return { firstName, lastName };
}

/**
 * G√©n√®re un userId temporaire bas√© sur le nom
 * ‚ö†Ô∏è ATTENTION: Cette m√©thode est pour la migration uniquement
 * Dans un vrai syst√®me, utilisez les vrais IDs utilisateurs
 * @param {string} firstName 
 * @param {string} lastName 
 * @param {string} fullName 
 * @returns {string} - userId temporaire
 */
function generateTempUserId(firstName, lastName, fullName) {
  const name = fullName || `${firstName} ${lastName}`;
  const hash = name.toLowerCase()
    .replace(/\s+/g, '')
    .replace(/[^a-z0-9]/g, ''); // Nettoyer les caract√®res sp√©ciaux
  const timestamp = Date.now().toString().slice(-6);
  return `temp_${hash}_${timestamp}`;
}

/**
 * Version alternative si vous avez une table Users
 * Cette fonction essaie de trouver le vrai userId
 * @param {string} firstName 
 * @param {string} lastName 
 * @param {string} fullName 
 * @returns {string} - userId r√©el ou temporaire
 */
async function findRealUserId(firstName, lastName, fullName) {
  // ‚úÖ Si vous avez un mod√®le User, d√©commentez et adaptez:
  /*
  try {
    const User = require('../models/user');
    
    let user = null;
    
    // Chercher par pr√©nom et nom
    if (firstName && lastName) {
      user = await User.findOne({ 
        firstName: new RegExp(`^${firstName}$`, 'i'), 
        lastName: new RegExp(`^${lastName}$`, 'i') 
      });
    }
    
    // Si pas trouv√©, chercher par nom complet
    if (!user && fullName) {
      const [fName, ...lNameParts] = fullName.split(' ');
      const lName = lNameParts.join(' ');
      user = await User.findOne({ 
        $or: [
          { 
            firstName: new RegExp(`^${fName}$`, 'i'), 
            lastName: new RegExp(`^${lName}$`, 'i') 
          },
          { 
            email: new RegExp(`${fullName.replace(/\s+/g, '.')}@`, 'i') 
          }
        ]
      });
    }
    
    if (user) {
      console.log(`   üéØ Utilisateur r√©el trouv√©: ${user._id}`);
      return user._id.toString();
    }
  } catch (error) {
    console.log(`   ‚ö†Ô∏è  Erreur recherche utilisateur: ${error.message}`);
  }
  */
  
  // Fallback: g√©n√©rer un ID temporaire
  return generateTempUserId(firstName, lastName, fullName);
}

// ‚úÖ Point d'entr√©e principal
if (require.main === module) {
  console.log('üåü MIGRATION DES AVIS - MonSavonVert');
  console.log('=====================================\n');
  
  migrateReviews()
    .then((report) => {
      console.log('üéâ MIGRATION TERMIN√âE AVEC SUCC√àS');
      
      if (report.errors > 0) {
        console.log('‚ö†Ô∏è  Attention: Des erreurs ont √©t√© rencontr√©es');
        process.exit(1);
      } else {
        process.exit(0);
      }
    })
    .catch((error) => {
      console.error('üí• √âCHEC DE LA MIGRATION:', error.message);
      process.exit(1);
    });
}

module.exports = { 
  migrateReviews, 
  extractNames, 
  generateTempUserId, 
  findRealUserId 
};