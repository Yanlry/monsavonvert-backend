// scripts/migrate-reviews.js
// Script √† ex√©cuter UNE SEULE FOIS pour migrer tes avis existants

const mongoose = require('mongoose');
const Product = require('../models/product'); // Ajuste le chemin si n√©cessaire

// AJOUT : Charger les variables d'environnement
require('dotenv').config();

/**
 * Script de migration pour ajouter userId aux avis existants
 * √Ä ex√©cuter une seule fois apr√®s la mise √† jour des routes
 */

async function migrateReviews() {
  try {
    console.log('üîÑ D√©but de la migration des avis...');

    // CORRECTION : Utiliser la vraie URL MongoDB depuis .env
    const mongoUri = process.env.CONNECTION_STRING || process.env.MONGODB_URI;
    
    if (!mongoUri) {
      throw new Error('‚ùå URL MongoDB non trouv√©e dans les variables d\'environnement (CONNECTION_STRING ou MONGODB_URI)');
    }

    console.log('üîó Connexion √† MongoDB...');
    await mongoose.connect(mongoUri);
    console.log('‚úÖ Connect√© √† MongoDB');

    // R√©cup√©rer tous les produits avec des avis
    const products = await Product.find({ reviews: { $exists: true, $ne: [] } });
    console.log(`üìã ${products.length} produits trouv√©s avec des avis`);

    if (products.length === 0) {
      console.log('‚ÑπÔ∏è  Aucun produit avec des avis trouv√©. Migration termin√©e.');
      return;
    }

    let totalReviewsUpdated = 0;

    for (const product of products) {
      console.log(`\nüîç Traitement du produit: ${product.title}`);
      console.log(`üìù ${product.reviews.length} avis √† traiter`);

      let productUpdated = false;

      for (const review of product.reviews) {
        // V√©rifier si l'avis a d√©j√† un userId
        if (!review.userId) {
          console.log(`‚ö†Ô∏è  Avis sans userId trouv√©: ${review.user || 'Anonyme'}`);
          
          // Assigner un userId g√©n√©rique pour les anciens avis
          review.userId = 'legacy-user-' + review._id.toString().substring(18);
          
          // Ajouter une date de cr√©ation si elle n'existe pas
          if (!review.createdAt) {
            review.createdAt = new Date();
          }

          productUpdated = true;
          totalReviewsUpdated++;
          
          console.log(`‚úÖ Avis mis √† jour avec userId: ${review.userId}`);
        } else {
          console.log(`‚úì Avis d√©j√† avec userId: ${review.userId}`);
        }
      }

      // Sauvegarder seulement si des modifications ont √©t√© faites
      if (productUpdated) {
        await product.save();
        console.log(`üíæ Produit sauvegard√©`);
      }
    }

    console.log(`\nüéâ Migration termin√©e !`);
    console.log(`üìä ${totalReviewsUpdated} avis mis √† jour au total`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
  } finally {
    // Fermer la connexion
    await mongoose.connection.close();
    console.log('üì§ Connexion ferm√©e');
  }
}

// Ex√©cuter le script
if (require.main === module) {
  migrateReviews();
}

module.exports = migrateReviews;